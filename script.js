// ===================================================================================
// SCRIPT COMPLETO PARA O DASHBOARD (VERSÃO DOCKER FINAL)
// ===================================================================================
let tempChartInstance = null; let humidityChartInstance = null;
function initializeCharts() { const tempCtx = document.getElementById('tempChart').getContext('2d'); const humidityCtx = document.getElementById('humidityChart').getContext('2d'); const commonChartOptions = { scales: { x: { type: 'time', time: { unit: 'hour', tooltipFormat: 'dd MMM yyyy, HH:mm', displayFormats: { hour: 'dd/MM HH:mm', day: 'dd/MM/yyyy' } }, title: { display: true, text: 'Data' } }, y: { beginAtZero: false, title: { display: true, } } }, responsive: true, maintainAspectRatio: false, interaction: { intersect: false, mode: 'index', }, }; tempChartInstance = new Chart(tempCtx, { type: 'line', data: { labels: [], datasets: [{ label: 'Temperatura (°C)', data: [], borderColor: '#cf4b00', backgroundColor: 'rgba(207, 75, 0, 0.1)', fill: true, tension: 0.2 }] }, options: { ...commonChartOptions, scales: { ...commonChartOptions.scales, y: { ...commonChartOptions.scales.y, title: { ...commonChartOptions.scales.y.title, text: 'Temperatura (°C)' } } } } }); humidityChartInstance = new Chart(humidityCtx, { type: 'line', data: { labels: [], datasets: [{ label: 'Umidade (%)', data: [], borderColor: '#02787d', backgroundColor: 'rgba(2, 120, 125, 0.1)', fill: true, tension: 0.2 }] }, options: { ...commonChartOptions, scales: { ...commonChartOptions.scales, y: { ...commonChartOptions.scales.y, title: { ...commonChartOptions.scales.y.title, text: 'Umidade (%)' } } } } }); }
async function updateLatestData() { try { const response = await fetch('api_latest.php'); if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`); const leituras = await response.json(); atualizarCards(leituras); atualizarTabela(leituras); } catch (error) { console.error('Falha ao buscar dados recentes:', error); } }
async function fetchChartData() { const startDate = document.getElementById('startDate').value; const endDate = document.getElementById('endDate').value; let apiUrl = 'api_dados.php'; if (startDate && endDate) { apiUrl += `?start=${startDate}&end=${endDate}`; } try { const response = await fetch(apiUrl); if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`); const data = await response.json(); const labels = data.map(item => item.data_hora); const tempData = data.map(item => item.temperatura); const humidityData = data.map(item => item.umidade); updateChartData(tempChartInstance, labels, tempData); updateChartData(humidityChartInstance, labels, humidityData); } catch (error) { console.error('Falha ao buscar dados para os gráficos:', error); } }
function updateChartData(chart, labels, data) { if (chart) { chart.data.labels = labels; chart.data.datasets[0].data = data; chart.update(); } }
function atualizarCards(leituras) { const tempElement = document.getElementById('latest-temp'); const humidityElement = document.getElementById('latest-humidity'); if (leituras && leituras.length > 0) { const maisRecente = leituras[0]; tempElement.innerText = `${parseFloat(maisRecente.temperatura).toFixed(1)} °C`; humidityElement.innerText = `${parseFloat(maisRecente.umidade).toFixed(1)} %`; } else { tempElement.innerText = '-- °C'; humidityElement.innerText = '-- %'; } }
function atualizarTabela(leituras) { const tbody = document.getElementById('dados-tabela'); tbody.innerHTML = ''; if (!leituras || leituras.length === 0) { tbody.innerHTML = '<tr><td colspan="3" style="text-align:center;">Nenhuma medição encontrada.</td></tr>'; return; } leituras.forEach(leitura => { const tr = document.createElement('tr'); const dataHora = new Date(leitura.data_hora); const dataFormatada = dataHora.toLocaleString('pt-BR', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit' }); const temperatura = parseFloat(leitura.temperatura).toFixed(2); const umidade = parseFloat(leitura.umidade).toFixed(2); tr.innerHTML = `<td>${dataFormatada}</td><td>${temperatura} °C</td><td>${umidade} %</td>`; tbody.appendChild(tr); }); }
document.addEventListener('DOMContentLoaded', () => { initializeCharts(); updateLatestData(); fetchChartData(); setInterval(updateLatestData, 5000); document.getElementById('filterBtn').addEventListener('click', fetchChartData); document.getElementById('resetBtn').addEventListener('click', () => { document.getElementById('startDate').value = ''; document.getElementById('endDate').value = ''; fetchChartData(); }); const deleteBtn = document.getElementById('delete-all-btn'); if (deleteBtn) { deleteBtn.addEventListener('click', async () => { const confirmado = confirm('Você tem certeza que deseja excluir TODAS as medições?\n\nEsta ação não pode ser desfeita.'); if (confirmado) { try { const response = await fetch('delete_all.php', { method: 'POST' }); const result = await response.json(); if (response.ok && result.success) { alert('Dados excluídos com sucesso!'); updateLatestData(); fetchChartData(); } else { throw new Error(result.message || 'Falha ao excluir os dados.'); } } catch (error) { console.error('Erro ao excluir os dados:', error); alert(`Erro: ${error.message}`); } } }); } });